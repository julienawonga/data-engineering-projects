# âœ… RÃ©seau Global
networks:
  data_platform_network:
    driver: bridge

# âœ… Volumes
volumes:
  postgres_data_dw:
  postgres_data_airflow:
  minio_data:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  superset_data:
  openmetadata_data:
  nifi_data:

# âœ… Configuration Globale des Logs
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "100m"
    max-file: "5"

# âœ… Configuration Airflow PartagÃ©e
x-airflow-common: &airflow-common
  image: apache/airflow:latest
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass@postgres_airflow/airflow_db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  networks:
    - data_platform_network
  depends_on:
    postgres_airflow:
      condition: service_healthy
  logging: *default-logging

# âœ… Services
services:
  ## ðŸŸ¢ PostgreSQL - Data Warehouse
  postgres_dw:
    image: postgres:13
    container_name: retailflow-postgres-dw
    restart: always
    logging: *default-logging
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DB: retail_dw
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dw:/var/lib/postgresql/data
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d retail_dw"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  ## ðŸŸ¢ PostgreSQL - Airflow Metadata
  postgres_airflow:
    image: postgres:13
    container_name: retailflow-postgres-airflow
    restart: always
    logging: *default-logging
    environment:
      POSTGRES_USER: airflow_user
      POSTGRES_PASSWORD: airflow_pass
      POSTGRES_DB: airflow_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_airflow:/var/lib/postgresql/data
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow_user -d airflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  ## ðŸŸ£ MinIO - Data Lake
  minio:
    image: quay.io/minio/minio
    container_name: retailflow-minio
    restart: always
    logging: *default-logging
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - data_platform_network

  ## ðŸŸ¢ Apache NiFi - Ingestion
  nifi:
    image: apache/nifi:latest
    container_name: retailflow-nifi
    restart: always
    logging: *default-logging
    environment:
      NIFI_WEB_HTTP_PORT: 8082
      NIFI_CLUSTER_IS_NODE: 'false'
      NIFI_REMOTE_INPUT_SOCKET_PORT: ''
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB
    ports:
      - "8082:8082"
    networks:
      - data_platform_network
    depends_on:
      postgres_dw:
        condition: service_healthy
      minio:
        condition: service_started

  ## ðŸŸ  Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: retailflow-airflow-scheduler
    command: scheduler
    depends_on:
      postgres_airflow:
        condition: service_healthy

  ## ðŸŸ  Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: retailflow-airflow-webserver
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      postgres_airflow:
        condition: service_healthy
  
  ### ðŸŸ  Airflow Init
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  ## ðŸŸ¢ Apache Superset
  superset:
    image: apache/superset:latest
    container_name: retailflow-superset
    restart: always
    logging: *default-logging
    environment:
      - SUPERSET__DATABASE__SQLALCHEMY_DATABASE_URI=postgresql://postgres_user:postgres_pass@postgres_dw/retail_dw
      - SUPERSET__SECURITY__ADMIN_USERNAME=admin
      - SUPERSET__SECURITY__ADMIN_PASSWORD=admin
      - SUPERSET__SECURITY__AUTH_TYPE=UsernamePasswordAuthentication
      - SUPERSET__WEB_SERVER_PORT=8088
      - SUPERSET__LOAD_EXAMPLES=false
    ports:
      - "8088:8088"
    volumes:
      - superset_data:/var/lib/superset
    networks:
      - data_platform_network
    depends_on:
      - postgres_dw
    healthcheck:
      test: ["CMD-SHELL", "superset health"]
      interval: 30s
      timeout: 10s
      retries: 5